From b88360075004605adf57b3c672bf6d83d4b8f232 Mon Sep 17 00:00:00 2001
From: Dongli Si <sidongli1997@gmail.com>
Date: Sun, 14 Apr 2024 21:48:55 +0800
Subject: [PATCH] Supports ending the process through the ctrl a + x shortcut
 key

Signed-off-by: Dongli Si <sidongli1997@gmail.com>
---
 vmm/src/serial_manager.rs | 32 ++++++++++++++++++++++++++++++++
 1 file changed, 32 insertions(+)

diff --git a/vmm/src/serial_manager.rs b/vmm/src/serial_manager.rs
index 426a983f..074fc6be 100644
--- a/vmm/src/serial_manager.rs
+++ b/vmm/src/serial_manager.rs
@@ -278,6 +278,9 @@ impl SerialManager {
         // why we can afford to block until an actual event is triggered.
         let timeout = if pty_write_out.is_some() { 500 } else { -1 };
 
+        let mut term_got_escape : bool;
+        term_got_escape = false;
+
         let thread = thread::Builder::new()
             .name("serial-manager".to_string())
             .spawn(move || {
@@ -389,6 +392,35 @@ impl SerialManager {
                                             input[0] = 0x0d;
                                         }
 
+                                        if count == 1 {
+                                            if term_got_escape {
+                                                term_got_escape = false;
+                                                if input[0] == 0x78 {
+                                                    unsafe {libc::kill(std::process::id() as i32, libc::SIGTERM);}
+                                                }
+                                                if input[0] == 0x1 {
+                                                    serial
+                                                        .as_ref()
+                                                        .lock()
+                                                        .unwrap()
+                                                        .queue_input_bytes(&input[..count])
+                                                        .map_err(Error::QueueInput)?;
+                                                    break;
+                                                }
+                                            }
+                                            if input[0] == 0x1 {
+                                                term_got_escape = true;
+                                                break;
+                                            }
+                                            serial
+                                                .as_ref()
+                                                .lock()
+                                                .unwrap()
+                                                .queue_input_bytes(&input[..count])
+                                                .map_err(Error::QueueInput)?;
+                                            break;
+                                        }
+
                                         serial
                                             .as_ref()
                                             .lock()
-- 
2.41.0

