From 008db4ab96c59885d747649a80f69240460f7247 Mon Sep 17 00:00:00 2001
From: Dongli Si <sidongli1997@gmail.com>
Date: Mon, 22 Jul 2024 22:23:35 +0800
Subject: [PATCH] Add Virtio Over MMIO support

Support for x86_64 and aarch64 architectures

seccomp needs to be turned off (--seccomp false)
---
 virtio-devices/src/transport/mmio_device.rs | 299 ++++++++++++++++++++
 virtio-devices/src/transport/mod.rs         |   3 +
 vmm/src/device_manager.rs                   | 110 ++++++-
 vmm/src/vm.rs                               |  26 +-
 4 files changed, 422 insertions(+), 16 deletions(-)
 create mode 100644 virtio-devices/src/transport/mmio_device.rs

diff --git a/virtio-devices/src/transport/mmio_device.rs b/virtio-devices/src/transport/mmio_device.rs
new file mode 100644
index 00000000..f59ccb36
--- /dev/null
+++ b/virtio-devices/src/transport/mmio_device.rs
@@ -0,0 +1,299 @@
+// Copyright 2018 The Chromium OS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE-BSD-3-Clause file.
+//
+// Copyright Â© 2019 Intel Corporation
+//
+// SPDX-License-Identifier: Apache-2.0 AND BSD-3-Clause
+
+use crate::GuestMemoryMmap;
+use crate::{
+    VirtioDevice, VirtioInterrupt, VirtioInterruptType,
+};
+use crate::transport::{VirtioTransport};
+use anyhow::anyhow;
+use libc::EFD_NONBLOCK;
+use std::ops::Deref;
+use std::sync::atomic::{AtomicUsize, Ordering};
+use std::sync::{Arc, Barrier, Mutex};
+use thiserror::Error;
+use virtio_queue::{Queue, QueueT};
+use vm_device::interrupt::{
+    InterruptIndex, InterruptManager, InterruptSourceGroup, LegacyIrqGroupConfig,
+};
+use vm_device::{BusDevice};
+use vm_memory::{GuestAddressSpace, GuestMemoryAtomic};
+use vmm_sys_util::eventfd::EventFd;
+use byteorder::{ByteOrder, LittleEndian};
+
+const VENDOR_ID: u32 = 0;
+const MMIO_MAGIC_VALUE: u32 = 0x7472_6976;
+const MMIO_VERSION: u32 = 2;
+
+const DEVICE_ACKNOWLEDGE: u32 = 0x01;
+const DEVICE_DRIVER: u32 = 0x02;
+const DEVICE_DRIVER_OK: u32 = 0x04;
+const DEVICE_FEATURES_OK: u32 = 0x08;
+const DEVICE_FAILED: u32 = 0x80;
+
+const INTERRUPT_STATUS_USED_RING: u32 = 0x1;
+pub const NOTIFY_REG_OFFSET: u64 = 0x50;
+
+#[derive(Error, Debug)]
+pub enum VirtioMmioDeviceError {
+    #[error("Failed creating VirtioMmioDevice: {0}")]
+    CreateVirtioMmioDevice(#[source] anyhow::Error),
+}
+pub type Result<T> = std::result::Result<T, VirtioMmioDeviceError>;
+
+pub struct VirtioInterruptLegacy {
+    interrupt_source_group: Arc<dyn InterruptSourceGroup>,
+    interrupt_status: Arc<AtomicUsize>,
+}
+
+impl VirtioInterruptLegacy {
+    pub fn new(
+        interrupt_source_group: Arc<dyn InterruptSourceGroup>,
+        interrupt_status: Arc<AtomicUsize>,
+    ) -> Self {
+        VirtioInterruptLegacy {
+            interrupt_source_group,
+            interrupt_status,
+        }
+    }
+}
+
+impl VirtioInterrupt for VirtioInterruptLegacy {
+    fn trigger(&self, _int_type: VirtioInterruptType) -> std::result::Result<(), std::io::Error> {
+        let status = INTERRUPT_STATUS_USED_RING;
+        self.interrupt_status.fetch_or(status as usize, Ordering::SeqCst);
+
+        self.interrupt_source_group.trigger(0)
+    }
+}
+
+pub struct VirtioMmioDevice {
+    device_activated: bool,
+    features_select: u32,
+    acked_features_select: u32,
+    driver_status: u32,
+    config_generation: u32,
+    queue_select: u32,
+
+    // Virtio device reference and status
+    device: Arc<Mutex<dyn VirtioDevice>>,
+
+    interrupt_status: Arc<AtomicUsize>,
+    virtio_interrupt: Option<Arc<dyn VirtioInterrupt>>,
+    interrupt_source_group: Arc<dyn InterruptSourceGroup>,
+
+    // virtio queues
+    queues: Vec<Queue>,
+    queue_evts: Vec<EventFd>,
+
+    // Guest memory
+    memory: GuestMemoryAtomic<GuestMemoryMmap>,
+}
+
+impl VirtioMmioDevice {
+    /// Constructs a new MMIO transport for the given virtio device.
+    #[allow(clippy::too_many_arguments)]
+    pub fn new(
+        memory: GuestMemoryAtomic<GuestMemoryMmap>,
+        device: Arc<Mutex<dyn VirtioDevice>>,
+        irq: InterruptIndex,
+        interrupt_manager: &Arc<dyn InterruptManager<GroupConfig = LegacyIrqGroupConfig>>,
+    ) -> Result<Self> {
+        let locked_device = device.lock().unwrap();
+        let mut queue_evts = Vec::new();
+        for _ in locked_device.queue_max_sizes().iter() {
+            queue_evts.push(EventFd::new(EFD_NONBLOCK).map_err(|e| {
+                VirtioMmioDeviceError::CreateVirtioMmioDevice(anyhow!(
+                    "Failed creating eventfd: {}",
+                    e
+                ))
+            })?)
+        }
+
+        let queues: Vec<Queue> = locked_device
+            .queue_max_sizes()
+            .iter()
+            .map(|&s| Queue::new(s).unwrap())
+            .collect();
+
+        drop(locked_device);
+
+        let interrupt_source_group = interrupt_manager
+            .create_group(LegacyIrqGroupConfig {irq})
+            .map_err(|e| {
+                VirtioMmioDeviceError::CreateVirtioMmioDevice(anyhow!(
+                    "Failed creating Legacy interrupt group: {}",
+                    e
+                ))
+            })?;
+
+        let mut virtio_mmio_device = VirtioMmioDevice {
+            device_activated: false,
+            features_select: 0,
+            acked_features_select: 0,
+            driver_status: 0,
+            config_generation: 0,
+            queue_select: 0,
+            device,
+            interrupt_status: Arc::new(AtomicUsize::new(0)),
+            virtio_interrupt: None,
+            interrupt_source_group,
+            queues,
+            queue_evts,
+            memory,
+        };
+
+        virtio_mmio_device.virtio_interrupt = Some(Arc::new(VirtioInterruptLegacy::new(
+                                         virtio_mmio_device.interrupt_source_group.clone(),
+                                         virtio_mmio_device.interrupt_status.clone())));
+
+        Ok(virtio_mmio_device)
+    }
+
+    pub fn queue_evts(&self) -> &[EventFd] {
+        self.queue_evts.as_slice()
+    }
+
+    fn is_driver_ready(&self) -> bool {
+        let ready_bits = DEVICE_ACKNOWLEDGE | DEVICE_DRIVER | DEVICE_DRIVER_OK | DEVICE_FEATURES_OK;
+        self.driver_status == ready_bits && self.driver_status & DEVICE_FAILED == 0
+    }
+
+    fn with_queue<U, F>(&self, d: U, f: F) -> U
+    where
+        F: FnOnce(&Queue) -> U,
+    {
+        match self.queues.get(self.queue_select as usize) {
+            Some(queue) => f(queue),
+            None => d,
+        }
+    }
+
+    fn with_queue_mut<F: FnOnce(&mut Queue)>(&mut self, f: F) -> bool {
+        if let Some(queue) = self.queues.get_mut(self.queue_select as usize) {
+            f(queue);
+            true
+        } else {
+            false
+        }
+    }
+}
+
+impl BusDevice for VirtioMmioDevice {
+    fn read(&mut self, _base: u64, offset: u64, data: &mut [u8]) {
+        match offset {
+            0x00..=0xff if data.len() == 4 => {
+                let v = match offset {
+                    0x0 => MMIO_MAGIC_VALUE,
+                    0x04 => MMIO_VERSION,
+                    0x08 => self.device.lock().unwrap().device_type(),
+                    0x0c => VENDOR_ID, // vendor id
+                    0x10 => if self.features_select == 1 { 0x1 } else { 0x0 },
+                    0x34 => self.with_queue(0, |q| u32::from(q.max_size())),
+                    0x44 => self.with_queue(0, |q| q.ready() as u32),
+                    0x60 => self.interrupt_status.load(Ordering::SeqCst) as u32,
+                    0x70 => self.driver_status,
+                    0xfc => self.config_generation,
+                    _ => {
+                        warn!("unknown virtio mmio register read: 0x{:x}", offset);
+                        return;
+                    }
+                };
+                LittleEndian::write_u32(data, v);
+            }
+
+            0x100..=0xfff => self.device.lock().unwrap().read_config(offset - 0x100, data),
+
+            _ => {
+                warn!(
+                    "invalid virtio mmio read: 0x{:x}:0x{:x}",
+                    offset,
+                    data.len()
+                );
+            }
+        };
+    }
+
+    fn write(&mut self, _base: u64, offset: u64, data: &[u8]) -> Option<Arc<Barrier>> {
+        let mut mut_q = false;
+
+        match offset {
+            0x00..=0xff if data.len() == 4 => {
+                let v = LittleEndian::read_u32(data);
+                match offset {
+                    0x14 => self.features_select = v,
+                    0x20 => self.device.lock().unwrap().ack_features(u64::from(v) << (self.acked_features_select * 32)),
+                    0x24 => self.acked_features_select = v,
+                    0x30 => self.queue_select = v,
+                    0x38 => mut_q = self.with_queue_mut(|q| q.set_size(v as u16)),
+                    0x44 => mut_q = self.with_queue_mut(|q| q.set_ready(v == 1)),
+                    0x64 => {
+                        self.interrupt_status
+                            .fetch_and(!(v as usize), Ordering::SeqCst);
+                    }
+                    0x70 => self.driver_status = v,
+                    0x80 => mut_q = self.with_queue_mut(|q| q.set_desc_table_address(Some(v), None)),
+                    0x84 => mut_q = self.with_queue_mut(|q| q.set_desc_table_address(None, Some(v))),
+                    0x90 => mut_q = self.with_queue_mut(|q| q.set_avail_ring_address(Some(v), None)),
+                    0x94 => mut_q = self.with_queue_mut(|q| q.set_avail_ring_address(None, Some(v))),
+                    0xa0 => mut_q = self.with_queue_mut(|q| q.set_used_ring_address(Some(v), None)),
+                    0xa4 => mut_q = self.with_queue_mut(|q| q.set_used_ring_address(None, Some(v))),
+                    _ => {
+                        warn!("unknown virtio mmio register write: 0x{:x}", offset);
+                        return None;
+                    }
+                }
+            }
+            0x100..=0xfff => {
+                        self.device.lock().unwrap().write_config(offset - 0x100, data);
+                        return None;
+                    },
+            _ => {
+                warn!(
+                    "invalid virtio mmio write: 0x{:x}:0x{:x}",
+                    offset,
+                    data.len()
+                );
+                return None;
+            }
+        }
+
+        if self.device_activated && mut_q {
+            warn!("virtio queue was changed after device was activated");
+        }
+
+        if !self.device_activated && self.is_driver_ready() {
+            let mut queues = Vec::new();
+            for (queue_index, queue) in self.queues.iter().enumerate() {
+                if !queue.ready() {
+                    continue;
+                }
+
+                if !queue.is_valid(self.memory.memory().deref()) {
+                    error!("Queue {} is not valid", queue_index);
+                }
+
+                queues.push((
+                    queue_index,
+                    vm_virtio::clone_queue(queue),
+                    self.queue_evts[queue_index].try_clone().unwrap(),
+                ));
+            }
+
+
+            self.device.lock().unwrap().activate(
+                    self.memory.clone(),
+                    self.virtio_interrupt.take().unwrap(),
+                    queues,
+                );
+            self.device_activated = true;
+        }
+
+        None
+    }
+}
diff --git a/virtio-devices/src/transport/mod.rs b/virtio-devices/src/transport/mod.rs
index 3a43b73c..b94b5654 100644
--- a/virtio-devices/src/transport/mod.rs
+++ b/virtio-devices/src/transport/mod.rs
@@ -8,6 +8,9 @@ mod pci_device;
 pub use pci_common_config::{VirtioPciCommonConfig, VIRTIO_PCI_COMMON_CONFIG_ID};
 pub use pci_device::{VirtioPciDevice, VirtioPciDeviceActivator, VirtioPciDeviceError};
 
+mod mmio_device;
+pub use mmio_device::{VirtioMmioDevice, VirtioMmioDeviceError, NOTIFY_REG_OFFSET};
+
 pub trait VirtioTransport {
     fn ioeventfds(&self, base_addr: u64) -> Vec<(&EventFd, u64)>;
 }
diff --git a/vmm/src/device_manager.rs b/vmm/src/device_manager.rs
index d6fc1b94..4c9de953 100644
--- a/vmm/src/device_manager.rs
+++ b/vmm/src/device_manager.rs
@@ -78,7 +78,7 @@ use std::time::Instant;
 use tracer::trace_scoped;
 use vfio_ioctls::{VfioContainer, VfioDevice, VfioDeviceFd};
 use virtio_devices::transport::VirtioTransport;
-use virtio_devices::transport::{VirtioPciDevice, VirtioPciDeviceActivator};
+use virtio_devices::transport::{VirtioPciDevice, VirtioPciDeviceActivator, VirtioMmioDevice, NOTIFY_REG_OFFSET};
 use virtio_devices::vhost_user::VhostUserConfig;
 use virtio_devices::{
     AccessPlatformMapping, ActivateError, VdpaDmaMapping, VirtioMemMappingSource,
@@ -104,8 +104,9 @@ use vm_virtio::VirtioDeviceType;
 use vmm_sys_util::eventfd::EventFd;
 #[cfg(target_arch = "x86_64")]
 use {devices::debug_console, devices::legacy::Serial};
-
 #[cfg(target_arch = "aarch64")]
+use arch::aarch64::layout::{IRQ_BASE};
+
 const MMIO_LEN: u64 = 0x1000;
 
 // Singleton devices / devices the user cannot name
@@ -234,6 +235,9 @@ pub enum DeviceManagerError {
     /// Cannot create virtio device
     VirtioDevice(virtio_devices::transport::VirtioPciDeviceError),
 
+    /// Cannot create virtio device
+    VirtioMmioDevice(virtio_devices::transport::VirtioMmioDeviceError),
+
     /// Cannot add PCI device
     AddPciDevice(pci::PciRootError),
 
@@ -796,7 +800,6 @@ pub struct DeviceManager {
     interrupt_controller: Option<Arc<Mutex<gic::Gic>>>,
 
     // Things to be added to the commandline (e.g. aarch64 early console)
-    #[cfg(target_arch = "aarch64")]
     cmdline_additions: Vec<String>,
 
     // ACPI GED notification device
@@ -1057,10 +1060,12 @@ impl DeviceManager {
             .ok_or(DeviceManagerError::AllocateIoPort)?;
 
         let mut pci_irq_slots = [0; 32];
+/*
         PciSegment::reserve_legacy_interrupts_for_pci_devices(
             &address_manager,
             &mut pci_irq_slots,
         )?;
+*/
 
         let mut pci_segments = vec![PciSegment::new_default_segment(
             &address_manager,
@@ -1129,7 +1134,6 @@ impl DeviceManager {
             address_manager: Arc::clone(&address_manager),
             console: Arc::new(Console::default()),
             interrupt_controller: None,
-            #[cfg(target_arch = "aarch64")]
             cmdline_additions: Vec::new(),
             ged_notification_device: None,
             config,
@@ -1244,6 +1248,7 @@ impl DeviceManager {
         #[cfg(target_arch = "aarch64")]
         self.add_legacy_devices(&legacy_interrupt_manager)?;
 
+/*
         {
             self.ged_notification_device = self.add_acpi_devices(
                 &legacy_interrupt_manager,
@@ -1255,6 +1260,7 @@ impl DeviceManager {
                     .map_err(DeviceManagerError::EventFd)?,
             )?;
         }
+*/
 
         self.original_termios_opt = original_termios_opt;
 
@@ -1274,7 +1280,8 @@ impl DeviceManager {
 
         virtio_devices.append(&mut self.make_virtio_devices()?);
 
-        self.add_pci_devices(virtio_devices.clone())?;
+//        self.add_pci_devices(virtio_devices.clone())?;
+        self.add_mmio_devices(virtio_devices.clone())?;
 
         self.virtio_devices = virtio_devices;
 
@@ -1410,6 +1417,25 @@ impl DeviceManager {
         Ok(())
     }
 
+    #[allow(unused_variables)]
+    fn add_mmio_devices(
+        &mut self,
+        virtio_devices: Vec<MetaVirtioDevice>,
+    ) -> DeviceManagerResult<()> {
+        for device in virtio_devices {
+            let mmio_base = self.address_manager
+                .allocator
+                .lock()
+                .unwrap()
+                .allocate_platform_mmio_addresses(None, MMIO_LEN as u64, Some(MMIO_LEN))
+                .ok_or(DeviceManagerError::AllocateMmioAddress)?;
+
+           self.add_virtio_mmio_device(device.virtio_device, mmio_base);
+        }
+
+        Ok(())
+    }
+
     #[cfg(target_arch = "aarch64")]
     fn add_interrupt_controller(
         &mut self,
@@ -3743,6 +3769,77 @@ impl DeviceManager {
         Ok(pci_device_bdf)
     }
 
+    fn add_virtio_mmio_device(
+        &mut self,
+        virtio_device: Arc<Mutex<dyn virtio_devices::VirtioDevice>>,
+        mmio_base: GuestAddress,
+    ) -> DeviceManagerResult<()> {
+        let memory = self.memory_manager.lock().unwrap().guest_memory();
+
+        let mmio_irq = self
+            .address_manager
+            .allocator
+            .lock()
+            .unwrap()
+            .allocate_irq()
+            .unwrap();
+
+        let virtio_mmio_device = Arc::new(Mutex::new(
+            VirtioMmioDevice::new(
+                memory,
+                virtio_device,
+                mmio_irq,
+                self.legacy_interrupt_manager.as_ref().unwrap(),
+            )
+            .map_err(DeviceManagerError::VirtioMmioDevice)?,
+        ));
+
+        for (i, queue_evt) in virtio_mmio_device.lock().unwrap().queue_evts().iter().enumerate() {
+            let io_addr = IoEventAddress::Mmio(
+                mmio_base.0 + u64::from(NOTIFY_REG_OFFSET),
+            );
+            self.address_manager
+                .vm
+                .register_ioevent(
+                    queue_evt,
+                    &io_addr,
+                    Some(hypervisor::DataMatch::DataMatch32(i as u32))
+                )
+                .map_err(|e| DeviceManagerError::RegisterIoevent(e.into()))?;
+        }
+
+        self.bus_devices.push(virtio_mmio_device.clone());
+
+        self.address_manager
+            .mmio_bus
+            .insert(
+                virtio_mmio_device.clone(),
+                mmio_base.0,
+                MMIO_LEN,
+            )
+            .map_err(DeviceManagerError::BusError)?;
+
+        #[cfg(target_arch = "aarch64")]
+        self.id_to_dev_info.insert(
+            (DeviceType::Virtio(mmio_irq), "virtio".to_string()),
+            MmioDeviceInfo {
+                addr: mmio_base.0,
+                len: MMIO_LEN,
+                irq: mmio_irq - IRQ_BASE,
+            },
+        );
+
+        #[cfg(target_arch = "x86_64")]
+        self.cmdline_additions.push(format!(
+            "virtio_mmio.device={}K@0x{:08x}:{}",
+            MMIO_LEN / 1024,
+            mmio_base.0,
+            mmio_irq
+        ));
+
+        Ok(())
+    }
+
     fn add_pvpanic_device(
         &mut self,
     ) -> DeviceManagerResult<Option<Arc<Mutex<devices::PvPanicDevice>>>> {
@@ -3839,7 +3936,6 @@ impl DeviceManager {
         &self.console
     }
 
-    #[cfg(target_arch = "aarch64")]
     pub fn cmdline_additions(&self) -> &[String] {
         self.cmdline_additions.as_slice()
     }
@@ -4637,12 +4733,14 @@ impl Aml for DeviceManager {
             TpmDevice {}.to_aml_bytes(sink);
         }
 
+/*
         self.ged_notification_device
             .as_ref()
             .unwrap()
             .lock()
             .unwrap()
             .to_aml_bytes(sink)
+*/
     }
 }
 
diff --git a/vmm/src/vm.rs b/vmm/src/vm.rs
index 71793f7b..72f2b0c3 100644
--- a/vmm/src/vm.rs
+++ b/vmm/src/vm.rs
@@ -501,13 +501,6 @@ impl Vm {
             .validate()
             .map_err(Error::ConfigValidation)?;
 
-        #[cfg(not(feature = "igvm"))]
-        let load_payload_handle = if snapshot.is_none() {
-            Self::load_payload_async(&memory_manager, &config)?
-        } else {
-            None
-        };
-
         info!("Booting VM from config: {:?}", &config);
 
         // Create NUMA nodes based on NumaConfig.
@@ -683,6 +676,13 @@ impl Vm {
             VmState::Created
         };
 
+        #[cfg(not(feature = "igvm"))]
+        let load_payload_handle = if snapshot.is_none() {
+            Self::load_payload_async(&memory_manager, &config, &device_manager)?
+        } else {
+            None
+        };
+
         Ok(Vm {
             #[cfg(feature = "tdx")]
             kernel,
@@ -942,14 +942,15 @@ impl Vm {
 
     pub fn generate_cmdline(
         payload: &PayloadConfig,
-        #[cfg(target_arch = "aarch64")] device_manager: &Arc<Mutex<DeviceManager>>,
+        device_manager: &Arc<Mutex<DeviceManager>>,
     ) -> Result<Cmdline> {
         let mut cmdline = Cmdline::new(arch::CMDLINE_MAX_SIZE).map_err(Error::CmdLineCreate)?;
         if let Some(s) = payload.cmdline.as_ref() {
             cmdline.insert_str(s).map_err(Error::CmdLineInsertStr)?;
         }
 
-        #[cfg(target_arch = "aarch64")]
+        cmdline.insert_str("acpi=off");
+
         for entry in device_manager.lock().unwrap().cmdline_additions() {
             cmdline.insert_str(entry).map_err(Error::CmdLineInsertStr)?;
         }
@@ -1097,6 +1098,7 @@ impl Vm {
     fn load_payload(
         payload: &PayloadConfig,
         memory_manager: Arc<Mutex<MemoryManager>>,
+        device_manager: Arc<Mutex<DeviceManager>>,
         #[cfg(feature = "igvm")] cpu_manager: Arc<Mutex<cpu::CpuManager>>,
         #[cfg(feature = "sev_snp")] sev_snp_enabled: bool,
     ) -> Result<EntryPoint> {
@@ -1125,7 +1127,7 @@ impl Vm {
             }
             (None, Some(kernel), _, _) => {
                 let kernel = File::open(kernel).map_err(Error::KernelFile)?;
-                let cmdline = Self::generate_cmdline(payload)?;
+                let cmdline = Self::generate_cmdline(payload, &device_manager)?;
                 Self::load_kernel(kernel, Some(cmdline), memory_manager)
             }
             _ => Err(Error::InvalidPayload),
@@ -1153,6 +1155,7 @@ impl Vm {
     fn load_payload_async(
         memory_manager: &Arc<Mutex<MemoryManager>>,
         config: &Arc<Mutex<VmConfig>>,
+        device_manager: &Arc<Mutex<DeviceManager>>,
         #[cfg(feature = "igvm")] cpu_manager: &Arc<Mutex<cpu::CpuManager>>,
         #[cfg(feature = "sev_snp")] sev_snp_enabled: bool,
     ) -> Result<Option<thread::JoinHandle<Result<EntryPoint>>>> {
@@ -1169,6 +1172,7 @@ impl Vm {
             .as_ref()
             .map(|payload| {
                 let memory_manager = memory_manager.clone();
+                let device_manager = device_manager.clone();
                 let payload = payload.clone();
                 #[cfg(feature = "igvm")]
                 let cpu_manager = cpu_manager.clone();
@@ -1179,6 +1183,8 @@ impl Vm {
                         Self::load_payload(
                             &payload,
                             memory_manager,
+                            #[cfg(target_arch = "x86_64")]
+                            device_manager,
                             #[cfg(feature = "igvm")]
                             cpu_manager,
                             #[cfg(feature = "sev_snp")]
-- 
2.44.0
